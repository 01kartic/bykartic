{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "color-picker-02",
  "type": "registry:block",
  "title": "Color Picker",
  "description": "A simple color input with picker which return formated values",
  "dependencies": [
    "color-convert",
    "lucide-react"
  ],
  "registryDependencies": [
    "popover",
    "select",
    "button",
    "input"
  ],
  "files": [
    {
      "path": "registry/new-york/color-picker/color-picker-02.tsx",
      "content": "\"use client\";\n\nimport { Input } from \"@/components/ui/input\";\nimport { ColorPicker } from \"./components/color-picker\";\nimport {\n\tPopover,\n\tPopoverTrigger,\n\tPopoverContent,\n} from \"@/components/ui/popover\";\nimport { useState } from \"react\";\n\nexport default function ColorPicker02() {\n\tconst [color, setColor] = useState(\"rgb(255, 0, 0)\");\n\n\treturn (\n\t\t<div className=\"flex flex-col space-y-2\">\n\t\t\t<Popover>\n\t\t\t\t<div className=\"relative\" id=\"color-input-03\">\n\t\t\t\t\t<PopoverTrigger asChild>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName=\"absolute top-1/2 left-1.5 -translate-y-1/2 size-6 border rounded focus:border-ring focus:ring-[3px] focus:ring-ring/20 cursor-pointer\"\n\t\t\t\t\t\t\tstyle={{ backgroundColor: color }}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</PopoverTrigger>\n\t\t\t\t\t<Input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tvalue={color}\n\t\t\t\t\t\tonChange={(e) => setColor(e.target.value)}\n\t\t\t\t\t\tclassName=\"pl-10\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<PopoverContent\n\t\t\t\t\tonOpenAutoFocus={(e) => e.preventDefault()}\n\t\t\t\t\talign=\"start\"\n\t\t\t\t\tclassName=\"w-fit p-0 m-0 border-none rounded-2xl\"\n\t\t\t\t>\n\t\t\t\t\t<ColorPicker\n\t\t\t\t\t\tonColorChange={(newColor) => {\n\t\t\t\t\t\t\tif (newColor.rgb !== color) {\n\t\t\t\t\t\t\t\tsetColor(newColor.rgb);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tdefaultColor={color}\n\t\t\t\t\t\tdefaultColorFormat=\"rgb\"\n\t\t\t\t\t/>\n\t\t\t\t</PopoverContent>\n\t\t\t</Popover>\n\t\t</div>\n\t);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/color-picker/components/color-picker.tsx",
      "content": "\"use client\";\n\nimport React, {\n\tuseState,\n\tuseEffect,\n\tuseMemo,\n\tuseCallback,\n\tuseRef,\n} from \"react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n\tSelect,\n\tSelectContent,\n\tSelectItem,\n\tSelectTrigger,\n\tSelectValue,\n} from \"@/components/ui/select\";\nimport convert from \"color-convert\";\n\nexport interface ColorObject {\n\thex: string;\n\trgb: string;\n\thsl: string;\n\thsv: string;\n\tvalues: {\n\t\trgb: [number, number, number];\n\t\thsl: [number, number, number];\n\t\thsv: [number, number, number];\n\t\talpha: number;\n\t};\n}\n\nexport interface ColorPickerProps {\n\tonColorChange?: (color: ColorObject) => void;\n\tdefaultColor?: string;\n\tdefaultColorFormat?: \"hex\" | \"rgb\" | \"hsl\" | \"hsv\";\n\tisColorFormat?: boolean;\n\tisEyeDropper?: boolean;\n\tisOpacity?: boolean;\n}\n\nexport type ColorFormats =\n\t| \"hex\"\n\t| \"hexa\"\n\t| \"rgb\"\n\t| \"rgba\"\n\t| \"hsl\"\n\t| \"hsla\"\n\t| \"hsv\"\n\t| \"hsva\";\n\nconst sliderStyles = `\n  .hueSlider::-webkit-slider-thumb,\n  .opacitySlider::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    appearance: none;\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    border: 4px solid white;\n    box-shadow: 0px 0px 1px 1px rgba(0, 0, 0, 0.25);\n    cursor: grab;\n  }\n\n  .hueSlider::-webkit-slider-thumb {\n    background: var(--thumb-color);\n  }\n\n  .hueSlider::-webkit-slider-thumb:active,\n  .opacitySlider::-webkit-slider-thumb:active {\n    cursor: grabbing;\n  }\n`;\n\nconst hsvToRgb = (h: number, s: number, v: number) => {\n\tconst scaled = convert.hsv.rgb([h * 360, s * 100, v * 100]);\n\treturn { r: scaled[0], g: scaled[1], b: scaled[2] };\n};\n\nconst RGBtoHex = (r: number, g: number, b: number, a: number = 1) => {\n\tconst hex = convert.rgb.hex([r, g, b]);\n\treturn a !== 1\n\t\t? `#${hex}${Math.round(a * 255)\n\t\t\t\t.toString(16)\n\t\t\t\t.padStart(2, \"0\")}`\n\t\t: `#${hex}`;\n};\n\nconst getAllColorFormats = (\n\tr: number,\n\tg: number,\n\tb: number,\n\ta: number,\n\tisOpacity: boolean\n): ColorObject => {\n\tconst rgbArray: [number, number, number] = [r, g, b];\n\tconst hslArray = convert.rgb.hsl(rgbArray);\n\tconst hsvArray = convert.rgb.hsv(rgbArray);\n\tconst includeAlpha = isOpacity && a < 1;\n\n\treturn {\n\t\thex: includeAlpha ? RGBtoHex(r, g, b, a) : `#${convert.rgb.hex(rgbArray)}`,\n\t\trgb: includeAlpha\n\t\t\t? `rgba(${r}, ${g}, ${b}, ${a.toFixed(2)})`\n\t\t\t: `rgb(${r}, ${g}, ${b})`,\n\t\thsl: includeAlpha\n\t\t\t? `hsla(${hslArray[0]}, ${hslArray[1]}%, ${hslArray[2]}%, ${a.toFixed(\n\t\t\t\t\t2\n\t\t\t  )})`\n\t\t\t: `hsl(${hslArray[0]}, ${hslArray[1]}%, ${hslArray[2]}%)`,\n\t\thsv: includeAlpha\n\t\t\t? `hsva(${hsvArray[0]}, ${hsvArray[1]}%, ${hsvArray[2]}%, ${a.toFixed(\n\t\t\t\t\t2\n\t\t\t  )})`\n\t\t\t: `hsv(${hsvArray[0]}, ${hsvArray[1]}%, ${hsvArray[2]}%)`,\n\t\tvalues: {\n\t\t\trgb: rgbArray,\n\t\t\thsl: hslArray,\n\t\t\thsv: hsvArray,\n\t\t\talpha: a,\n\t\t},\n\t};\n};\n\nconst parseColor = (color: string, isOpacity: boolean) => {\n\tlet h = 0,\n\t\ts = 1,\n\t\tv = 1,\n\t\ta = 1;\n\n\ttry {\n\t\tif (!color) return { h, s, v, a };\n\n\t\tif (color.startsWith(\"#\")) {\n\t\t\tconst cleanHex = color.slice(1);\n\t\t\tlet r = 0,\n\t\t\t\tg = 0,\n\t\t\t\tb = 0;\n\n\t\t\tif (cleanHex.length === 3 || cleanHex.length === 4) {\n\t\t\t\tr = parseInt(cleanHex[0] + cleanHex[0], 16);\n\t\t\t\tg = parseInt(cleanHex[1] + cleanHex[1], 16);\n\t\t\t\tb = parseInt(cleanHex[2] + cleanHex[2], 16);\n\t\t\t\tif (cleanHex.length === 4) {\n\t\t\t\t\ta = parseInt(cleanHex[3] + cleanHex[3], 16) / 255;\n\t\t\t\t}\n\t\t\t} else if (cleanHex.length >= 6) {\n\t\t\t\tr = parseInt(cleanHex.substring(0, 2), 16);\n\t\t\t\tg = parseInt(cleanHex.substring(2, 4), 16);\n\t\t\t\tb = parseInt(cleanHex.substring(4, 6), 16);\n\t\t\t\tif (cleanHex.length >= 8) {\n\t\t\t\t\ta = parseInt(cleanHex.substring(6, 8), 16) / 255;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst hsv = convert.rgb.hsv([r, g, b]);\n\t\t\th = hsv[0] / 360;\n\t\t\ts = hsv[1] / 100;\n\t\t\tv = hsv[2] / 100;\n\t\t} else if (color.startsWith(\"rgb\")) {\n\t\t\tconst values = color.match(/[\\d.]+/g)?.map(Number) || [];\n\t\t\tif (values.length >= 3) {\n\t\t\t\tconst [r, g, b] = values;\n\t\t\t\tconst hsv = convert.rgb.hsv([r, g, b]);\n\t\t\t\th = hsv[0] / 360;\n\t\t\t\ts = hsv[1] / 100;\n\t\t\t\tv = hsv[2] / 100;\n\t\t\t\tif (values.length >= 4) a = values[3];\n\t\t\t}\n\t\t} else if (color.startsWith(\"hsl\")) {\n\t\t\tconst values = color.match(/[\\d.]+/g)?.map(Number) || [];\n\t\t\tif (values.length >= 3) {\n\t\t\t\tconst [hVal, sVal, lVal] = values;\n\t\t\t\tconst rgb = convert.hsl.rgb([hVal, sVal, lVal]);\n\t\t\t\tconst hsv = convert.rgb.hsv(rgb);\n\t\t\t\th = hsv[0] / 360;\n\t\t\t\ts = hsv[1] / 100;\n\t\t\t\tv = hsv[2] / 100;\n\t\t\t\tif (values.length >= 4) a = values[3];\n\t\t\t}\n\t\t} else if (color.startsWith(\"hsv\")) {\n\t\t\tconst values = color.match(/[\\d.]+/g)?.map(Number) || [];\n\t\t\tif (values.length >= 3) {\n\t\t\t\th = (values[0] % 360) / 360;\n\t\t\t\ts = Math.min(100, Math.max(0, values[1])) / 100;\n\t\t\t\tv = Math.min(100, Math.max(0, values[2])) / 100;\n\t\t\t\tif (values.length >= 4) a = values[3];\n\t\t\t}\n\t\t}\n\t} catch (error) {\n\t\tconsole.error(\"Error parsing color:\", error);\n\t}\n\n\treturn {\n\t\th,\n\t\ts: Math.min(1, Math.max(0, s)),\n\t\tv: Math.min(1, Math.max(0, v)),\n\t\ta: isOpacity ? Math.min(1, Math.max(0, a)) : 1,\n\t};\n};\n\nexport function ColorPicker({\n\tonColorChange,\n\tdefaultColor = \"#FF0000\",\n\tdefaultColorFormat = \"hex\",\n\tisColorFormat = true,\n\tisEyeDropper = true,\n\tisOpacity = true,\n}: ColorPickerProps) {\n\tconst [hue, setHue] = useState(0);\n\tconst [saturation, setSaturation] = useState(1);\n\tconst [value, setValue] = useState(1);\n\tconst [alpha, setAlpha] = useState(1);\n\tconst [userInputValue, setUserInputValue] = useState(\"\");\n\tconst [inputFormat, setInputFormat] = useState<ColorFormats>(\n\t\tisOpacity ? \"hexa\" : \"hex\"\n\t);\n\tconst [isInputFocused, setIsInputFocused] = useState(false);\n\tconst [isInitialized, setIsInitialized] = useState(false);\n\tconst pickerRef = useRef<HTMLDivElement>(null);\n\tconst [isEyeDropperAvailable, setIsEyeDropperAvailable] = useState(false);\n\n\tuseEffect(() => {\n\t\tconst styleElement = document.createElement(\"style\");\n\t\tstyleElement.textContent = sliderStyles;\n\t\tdocument.head.appendChild(styleElement);\n\t\treturn () => {\n\t\t\tdocument.head.removeChild(styleElement);\n\t\t};\n\t}, []);\n\n\tuseEffect(() => {\n\t\tsetIsEyeDropperAvailable(\"EyeDropper\" in window);\n\t}, []);\n\n\tuseEffect(() => {\n\t\tif (!isInitialized) {\n\t\t\tconst initialColor =\n\t\t\t\tdefaultColor || (isOpacity ? \"#FF0000FF\" : \"#FF0000\");\n\t\t\tconst { h, s, v, a } = parseColor(initialColor, isOpacity);\n\n\t\t\tsetHue(h);\n\t\t\tsetSaturation(s);\n\t\t\tsetValue(v);\n\t\t\tsetAlpha(a);\n\t\t\tsetUserInputValue(initialColor);\n\n\t\t\tlet format: ColorFormats = isOpacity ? \"hexa\" : \"hex\";\n\t\t\tif (defaultColorFormat) {\n\t\t\t\tif (isOpacity) {\n\t\t\t\t\tswitch (defaultColorFormat) {\n\t\t\t\t\t\tcase \"hex\":\n\t\t\t\t\t\t\tformat = \"hexa\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"rgb\":\n\t\t\t\t\t\t\tformat = \"rgba\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"hsl\":\n\t\t\t\t\t\t\tformat = \"hsla\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"hsv\":\n\t\t\t\t\t\t\tformat = \"hsva\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tformat = defaultColorFormat;\n\t\t\t\t}\n\t\t\t}\n\t\t\tsetInputFormat(format);\n\t\t\tsetIsInitialized(true);\n\t\t}\n\t}, [defaultColor, isOpacity, defaultColorFormat, isInitialized]);\n\n\tconst rgb = useMemo(\n\t\t() => hsvToRgb(hue, saturation, value),\n\t\t[hue, saturation, value]\n\t);\n\n\tconst colorObject = useMemo(\n\t\t() => getAllColorFormats(rgb.r, rgb.g, rgb.b, alpha, isOpacity),\n\t\t[rgb.r, rgb.g, rgb.b, alpha, isOpacity]\n\t);\n\n\tconst formatInputColor = useCallback((): string => {\n\t\tconst { r, g, b } = rgb;\n\t\tconst a = alpha;\n\n\t\tswitch (inputFormat) {\n\t\t\tcase \"hex\":\n\t\t\t\treturn isOpacity && alpha < 1\n\t\t\t\t\t? RGBtoHex(r, g, b, a)\n\t\t\t\t\t: `#${convert.rgb.hex([r, g, b])}`;\n\n\t\t\tcase \"hexa\":\n\t\t\t\treturn RGBtoHex(r, g, b, a);\n\n\t\t\tcase \"rgb\":\n\t\t\t\treturn `rgb(${r}, ${g}, ${b})`;\n\t\t\tcase \"rgba\":\n\t\t\t\treturn `rgba(${r}, ${g}, ${b}, ${a.toFixed(2)})`;\n\n\t\t\tcase \"hsl\": {\n\t\t\t\tconst [h, s, l] = convert.rgb.hsl([r, g, b]);\n\t\t\t\treturn `hsl(${h}, ${s}%, ${l}%)`;\n\t\t\t}\n\t\t\tcase \"hsla\": {\n\t\t\t\tconst [h, s, l] = convert.rgb.hsl([r, g, b]);\n\t\t\t\treturn `hsla(${h}, ${s}%, ${l}%, ${a.toFixed(2)})`;\n\t\t\t}\n\n\t\t\tcase \"hsv\": {\n\t\t\t\tconst [h, s, v] = convert.rgb.hsv([r, g, b]);\n\t\t\t\treturn `hsv(${h}, ${s}%, ${v}%)`;\n\t\t\t}\n\t\t\tcase \"hsva\": {\n\t\t\t\tconst [h, s, v] = convert.rgb.hsv([r, g, b]);\n\t\t\t\treturn `hsva(${h}, ${s}%, ${v}%, ${a.toFixed(2)})`;\n\t\t\t}\n\n\t\t\tdefault:\n\t\t\t\treturn colorObject.hex;\n\t\t}\n\t}, [rgb, alpha, inputFormat, isOpacity, colorObject.hex]);\n\n\tuseEffect(() => {\n\t\tif (!isInputFocused && isInitialized) {\n\t\t\tsetUserInputValue(formatInputColor());\n\t\t}\n\t}, [formatInputColor, isInputFocused, isInitialized]);\n\n\tconst prevColorRef = useRef<string>(\"\");\n\n\tuseEffect(() => {\n\t\tif (isInitialized && onColorChange) {\n\t\t\tconst currentColorString = JSON.stringify(colorObject);\n\t\t\tif (currentColorString !== prevColorRef.current) {\n\t\t\t\tprevColorRef.current = currentColorString;\n\t\t\t\tonColorChange(colorObject);\n\t\t\t}\n\t\t}\n\t}, [colorObject, onColorChange, isInitialized]);\n\n\tconst handleEyeDropper = async () => {\n\t\tif (!isEyeDropperAvailable) return;\n\n\t\ttry {\n\t\t\tconst eyeDropper = new (window as any).EyeDropper();\n\t\t\tconst { sRGBHex } = await eyeDropper.open();\n\t\t\tconst { h, s, v } = parseColor(sRGBHex, isOpacity);\n\t\t\tsetHue(h);\n\t\t\tsetSaturation(s);\n\t\t\tsetValue(v);\n\t\t} catch {}\n\t};\n\n\tconst handleColorCommit = () => {\n\t\ttry {\n\t\t\tconst { h, s, v, a } = parseColor(userInputValue, isOpacity);\n\t\t\tsetHue(h);\n\t\t\tsetSaturation(s);\n\t\t\tsetValue(v);\n\t\t\tsetAlpha(a);\n\t\t\tsetUserInputValue(formatInputColor());\n\t\t} catch (error) {\n\t\t\tsetUserInputValue(formatInputColor());\n\t\t}\n\t\tsetIsInputFocused(false);\n\t};\n\n\tconst handleColorChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n\t\tconst newValue = e.target.value;\n\t\tsetUserInputValue(newValue);\n\n\t\ttry {\n\t\t\tif (\n\t\t\t\t(inputFormat.startsWith(\"hex\") &&\n\t\t\t\t\t/^#[0-9A-Fa-f]{6,8}$/.test(newValue)) ||\n\t\t\t\t(newValue.includes(\"(\") && newValue.includes(\")\"))\n\t\t\t) {\n\t\t\t\tconst { h, s, v, a } = parseColor(newValue, isOpacity);\n\t\t\t\tsetHue(h);\n\t\t\t\tsetSaturation(s);\n\t\t\t\tsetValue(v);\n\t\t\t\tsetAlpha(a);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\t// Silently ignoring parsing errors during typing\n\t\t}\n\t};\n\n\tconst handleKeyDown = (e: React.KeyboardEvent) => {\n\t\tif (e.key === \"Enter\") {\n\t\t\thandleColorCommit();\n\t\t}\n\t};\n\n\tconst handleFormatChange = useCallback(\n\t\t(newFormat: ColorFormats) => {\n\t\t\tsetInputFormat(newFormat);\n\n\t\t\tconst { r, g, b } = rgb;\n\t\t\tconst a = alpha;\n\n\t\t\tlet formatted = \"\";\n\t\t\tswitch (newFormat) {\n\t\t\t\tcase \"hex\":\n\t\t\t\t\tformatted =\n\t\t\t\t\t\tisOpacity && alpha < 1\n\t\t\t\t\t\t\t? RGBtoHex(r, g, b, a)\n\t\t\t\t\t\t\t: `#${convert.rgb.hex([r, g, b])}`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"hexa\":\n\t\t\t\t\tformatted = RGBtoHex(r, g, b, a);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"rgb\":\n\t\t\t\t\tformatted = `rgb(${r}, ${g}, ${b})`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"rgba\":\n\t\t\t\t\tformatted = `rgba(${r}, ${g}, ${b}, ${a.toFixed(2)})`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"hsl\": {\n\t\t\t\t\tconst [h, s, l] = convert.rgb.hsl([r, g, b]);\n\t\t\t\t\tformatted = `hsl(${h}, ${s}%, ${l}%)`;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"hsla\": {\n\t\t\t\t\tconst [h, s, l] = convert.rgb.hsl([r, g, b]);\n\t\t\t\t\tformatted = `hsla(${h}, ${s}%, ${l}%, ${a.toFixed(2)})`;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"hsv\": {\n\t\t\t\t\tconst [h, s, v] = convert.rgb.hsv([r, g, b]);\n\t\t\t\t\tformatted = `hsv(${h}, ${s}%, ${v}%)`;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"hsva\": {\n\t\t\t\t\tconst [h, s, v] = convert.rgb.hsv([r, g, b]);\n\t\t\t\t\tformatted = `hsva(${h}, ${s}%, ${v}%, ${a.toFixed(2)})`;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (formatted) {\n\t\t\t\tsetUserInputValue(formatted);\n\t\t\t}\n\t\t},\n\t\t[rgb, alpha, isOpacity]\n\t);\n\n\tconst handleInteraction = useCallback(\n\t\t(e: React.MouseEvent | React.TouchEvent) => {\n\t\t\tif (!pickerRef.current) return;\n\n\t\t\tconst isTouch = \"touches\" in e;\n\t\t\tconst clientX = isTouch\n\t\t\t\t? e.touches[0].clientX\n\t\t\t\t: (e as React.MouseEvent).clientX;\n\t\t\tconst clientY = isTouch\n\t\t\t\t? e.touches[0].clientY\n\t\t\t\t: (e as React.MouseEvent).clientY;\n\t\t\tconst rect = pickerRef.current.getBoundingClientRect();\n\n\t\t\tconst moveHandler = (moveEvent: MouseEvent | TouchEvent) => {\n\t\t\t\tif (!pickerRef.current) return;\n\n\t\t\t\tconst rect = pickerRef.current.getBoundingClientRect();\n\t\t\t\tconst moveX =\n\t\t\t\t\t\"touches\" in moveEvent\n\t\t\t\t\t\t? moveEvent.touches[0].clientX\n\t\t\t\t\t\t: (moveEvent as MouseEvent).clientX;\n\t\t\t\tconst moveY =\n\t\t\t\t\t\"touches\" in moveEvent\n\t\t\t\t\t\t? moveEvent.touches[0].clientY\n\t\t\t\t\t\t: (moveEvent as MouseEvent).clientY;\n\n\t\t\t\tconst newSaturation = Math.max(\n\t\t\t\t\t0,\n\t\t\t\t\tMath.min(1, (moveX - rect.left) / rect.width)\n\t\t\t\t);\n\t\t\t\tconst newValue = Math.max(\n\t\t\t\t\t0,\n\t\t\t\t\tMath.min(1, 1 - (moveY - rect.top) / rect.height)\n\t\t\t\t);\n\n\t\t\t\tsetSaturation(newSaturation);\n\t\t\t\tsetValue(newValue);\n\t\t\t};\n\n\t\t\tconst endHandler = () => {\n\t\t\t\tdocument.removeEventListener(\n\t\t\t\t\tisTouch ? \"touchmove\" : \"mousemove\",\n\t\t\t\t\tmoveHandler\n\t\t\t\t);\n\t\t\t\tdocument.removeEventListener(\n\t\t\t\t\tisTouch ? \"touchend\" : \"mouseup\",\n\t\t\t\t\tendHandler\n\t\t\t\t);\n\t\t\t};\n\n\t\t\tdocument.addEventListener(\n\t\t\t\tisTouch ? \"touchmove\" : \"mousemove\",\n\t\t\t\tmoveHandler\n\t\t\t);\n\t\t\tdocument.addEventListener(isTouch ? \"touchend\" : \"mouseup\", endHandler);\n\n\t\t\tsetSaturation(\n\t\t\t\tMath.max(0, Math.min(1, (clientX - rect.left) / rect.width))\n\t\t\t);\n\t\t\tsetValue(\n\t\t\t\tMath.max(0, Math.min(1, 1 - (clientY - rect.top) / rect.height))\n\t\t\t);\n\t\t},\n\t\t[]\n\t);\n\n\tconst pickerStyle = {\n\t\tbackground: `linear-gradient(to bottom, rgba(0,0,0,0), black), \n                linear-gradient(to right, white, hsl(${hue * 360}, 100%, 50%))`,\n\t};\n\n\tconst thumbStyle = {\n\t\tleft: `${saturation * 100}%`,\n\t\ttop: `${(1 - value) * 100}%`,\n\t\tbackgroundColor: `rgb(${rgb.r}, ${rgb.g}, ${rgb.b})`,\n\t};\n\n\tif (!isInitialized) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<div\n\t\t\tclassName={`${\n\t\t\t\tisColorFormat ? \"w-64\" : \"w-56\"\n\t\t\t} bg-background border rounded-2xl shadow-lg mt-1`}\n\t\t>\n\t\t\t<div className=\"flex flex-col\">\n\t\t\t\t<div className=\"flex m-2 gap-1.5\">\n\t\t\t\t\t<Input\n\t\t\t\t\t\tvalue={userInputValue}\n\t\t\t\t\t\tonChange={handleColorChange}\n\t\t\t\t\t\tonFocus={() => setIsInputFocused(true)}\n\t\t\t\t\t\tonBlur={handleColorCommit}\n\t\t\t\t\t\tonKeyDown={handleKeyDown}\n\t\t\t\t\t\tclassName={`h-8 flex-1 text-xs md:text-xs px-2 py-1.5 ${\n\t\t\t\t\t\t\tinputFormat.startsWith(\"hex\") ? \"uppercase\" : \"\"\n\t\t\t\t\t\t}`}\n\t\t\t\t\t\tplaceholder={\n\t\t\t\t\t\t\tinputFormat.startsWith(\"hex\")\n\t\t\t\t\t\t\t\t? \"#FF0000\"\n\t\t\t\t\t\t\t\t: inputFormat.startsWith(\"rgb\")\n\t\t\t\t\t\t\t\t? \"rgb(255, 0, 0)\"\n\t\t\t\t\t\t\t\t: inputFormat.startsWith(\"hsl\")\n\t\t\t\t\t\t\t\t? \"hsl(0, 100%, 50%)\"\n\t\t\t\t\t\t\t\t: \"hsv(0, 100%, 100%)\"\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t\t{isColorFormat && (\n\t\t\t\t\t\t<Select value={inputFormat} onValueChange={handleFormatChange}>\n\t\t\t\t\t\t\t<SelectTrigger size=\"sm\" className=\"w-18 text-xs px-2 gap-1\">\n\t\t\t\t\t\t\t\t<SelectValue placeholder=\"Format\" />\n\t\t\t\t\t\t\t</SelectTrigger>\n\t\t\t\t\t\t\t<SelectContent align=\"end\" className=\"min-w-24\">\n\t\t\t\t\t\t\t\t<SelectItem\n\t\t\t\t\t\t\t\t\tclassName=\"text-xs\"\n\t\t\t\t\t\t\t\t\tvalue={isOpacity ? \"hexa\" : \"hex\"}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tHex\n\t\t\t\t\t\t\t\t</SelectItem>\n\t\t\t\t\t\t\t\t<SelectItem\n\t\t\t\t\t\t\t\t\tclassName=\"text-xs\"\n\t\t\t\t\t\t\t\t\tvalue={isOpacity ? \"rgba\" : \"rgb\"}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{isOpacity ? \"RGBa\" : \"RGB\"}\n\t\t\t\t\t\t\t\t</SelectItem>\n\t\t\t\t\t\t\t\t<SelectItem\n\t\t\t\t\t\t\t\t\tclassName=\"text-xs\"\n\t\t\t\t\t\t\t\t\tvalue={isOpacity ? \"hsla\" : \"hsl\"}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{isOpacity ? \"HSLa\" : \"HSL\"}\n\t\t\t\t\t\t\t\t</SelectItem>\n\t\t\t\t\t\t\t\t<SelectItem\n\t\t\t\t\t\t\t\t\tclassName=\"text-xs\"\n\t\t\t\t\t\t\t\t\tvalue={isOpacity ? \"hsva\" : \"hsv\"}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{isOpacity ? \"HSVa\" : \"HSV\"}\n\t\t\t\t\t\t\t\t</SelectItem>\n\t\t\t\t\t\t\t</SelectContent>\n\t\t\t\t\t\t</Select>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tref={pickerRef}\n\t\t\t\t\tclassName={`relative w-full ${\n\t\t\t\t\t\tisColorFormat ? \"size-64\" : \"size-56\"\n\t\t\t\t\t} border-y dark:border-[#1D1D1D] cursor-crosshair active:cursor-grabbing aspect-square`}\n\t\t\t\t\tstyle={pickerStyle}\n\t\t\t\t\tonMouseDown={handleInteraction}\n\t\t\t\t\tonTouchStart={handleInteraction}\n\t\t\t\t>\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName=\"absolute w-5 h-5 rounded-full border-4 border-white shadow-xl transform -translate-x-1/2 -translate-y-1/2 cursor-grab active:cursor-grabbing\"\n\t\t\t\t\t\tstyle={thumbStyle}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"w-full flex justify-between items-center p-2 gap-2\">\n\t\t\t\t\t{isEyeDropper && isEyeDropperAvailable && (\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tonClick={handleEyeDropper}\n\t\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\t\tclassName={`shrink-0 ${\n\t\t\t\t\t\t\t\tisOpacity && isColorFormat ? \"p-2\" : \"size-7\"\n\t\t\t\t\t\t\t}`}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<svg\n\t\t\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\t\t\tclassName=\"shrink-0 size-8\"\n\t\t\t\t\t\t\t\tviewBox=\"0 0 36 36\"\n\t\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\t\tfillRule=\"evenodd\"\n\t\t\t\t\t\t\t\t\tclipRule=\"evenodd\"\n\t\t\t\t\t\t\t\t\td=\"M14.7063 13.6953C14.0267 14.3749 14.0267 15.4768 14.7063 16.1564L14.8826 16.3328L11.0194 20.196C10.3667 20.8487 10 21.734 10 22.6571V25.1311C10 25.6116 10.3896 26.0013 10.8701 26.0013H13.3441C14.2672 26.0013 15.1525 25.6345 15.8053 24.9818L19.6685 21.1186L19.8448 21.2949C20.5244 21.9745 21.6263 21.9745 22.306 21.2949L23.4945 20.1063C24.1739 19.427 24.1742 18.3256 23.4953 17.646L23.3181 17.4688L25.0101 15.777C26.3316 14.4554 26.3316 12.3127 25.0101 10.9911C23.6885 9.66956 21.5458 9.66956 20.2242 10.9911L18.5323 12.683L18.3561 12.5067C17.6764 11.8271 16.5745 11.8271 15.8949 12.5067L14.7063 13.6953ZM16.1132 17.5633L18.4379 19.888L14.5747 23.7512C14.2483 24.0775 13.8057 24.261 13.3441 24.261H11.7403V22.6571C11.7403 22.1956 11.9236 21.7529 12.25 21.4265L16.1132 17.5633Z\"\n\t\t\t\t\t\t\t\t\tfill=\"currentColor\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</svg>\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t)}\n\n\t\t\t\t\t<div className=\"w-full flex flex-col gap-2\">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"range\"\n\t\t\t\t\t\t\tmin=\"0\"\n\t\t\t\t\t\t\tmax=\"1\"\n\t\t\t\t\t\t\tstep=\"0.01\"\n\t\t\t\t\t\t\tvalue={hue}\n\t\t\t\t\t\t\tonChange={(e) => setHue(parseFloat(e.target.value))}\n\t\t\t\t\t\t\tclassName=\"hueSlider w-full h-5 rounded-full appearance-none\"\n\t\t\t\t\t\t\tstyle={\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tbackground: `linear-gradient(to right, red, yellow, lime, cyan, blue, magenta, red)`,\n\t\t\t\t\t\t\t\t\t\"--thumb-color\": `hsl(${hue * 360}, 100%, 50%)`,\n\t\t\t\t\t\t\t\t} as React.CSSProperties\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{isOpacity && (\n\t\t\t\t\t\t\t<div className=\"relative\">\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclassName=\"w-full h-5 border rounded-full opacity-25 z-0\"\n\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\tbackgroundImage: `url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='15' height='15' viewBox='0 0 10 10'%3E%3Crect width='10' height='10' fill='%23787878' fill-opacity='0.4' /%3E%3Crect width='5' height='5' fill='white'/%3E%3Crect x='5' y='5' width='5' height='5' fill='white'/%3E%3C/svg%3E\")`,\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"range\"\n\t\t\t\t\t\t\t\t\tmin=\"0\"\n\t\t\t\t\t\t\t\t\tmax=\"1\"\n\t\t\t\t\t\t\t\t\tstep=\"0.01\"\n\t\t\t\t\t\t\t\t\tvalue={alpha}\n\t\t\t\t\t\t\t\t\tonChange={(e) => setAlpha(parseFloat(e.target.value))}\n\t\t\t\t\t\t\t\t\tclassName=\"absolute opacitySlider w-full h-5 top-0 left-0 rounded-full z-20 appearance-none\"\n\t\t\t\t\t\t\t\t\tstyle={\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tbackground: `linear-gradient(to right, transparent, rgb(${rgb.r},${rgb.g},${rgb.b})`,\n\t\t\t\t\t\t\t\t\t\t} as React.CSSProperties\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default ColorPicker;\n",
      "type": "registry:component"
    }
  ]
}